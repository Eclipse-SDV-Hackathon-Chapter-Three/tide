{
    up_streamer_config: {
      // The message queue size of each route between endpoints within the UStreamer
      // Lower numbers mean that some messages will be dropped
      message_queue_size: 10000
    },
    streamer_uuri: {
      // Determines the authority_name of the host device
      // Used when initializing host transport
      authority: "streamer",
      // Determines the ue_id of the streamer
      // Used when initializing host transport
      ue_id: 78,
      // Determines the ue_version_major of the streamer
      // Used when initializing host transport
      ue_version_major: 1
    },
    usubscription_config: {
      // Lists the path to the subscription file when using static file
      file_path: "config/subscription_data.json"
    },
    transports: {
        zenoh: {
            // Path to the zenoh config file
            config_file: "config/ZENOH_CONFIG.json5",
            // List of endpoints that use the zenoh transport
            endpoints: [
                {
                    authority: "EGOVehicle",
                    // Make sure that each endpoint has a unique identifier or the streamer will not start
                    endpoint: "egovehicle_endpoint",
                    // All endpoint identifiers listed here must also be defined in this config
                    forwarding: [
                        "aaos_endpoint"
                    ]
                },
                {
                    authority: "CruiseControl",
                    // Make sure that each endpoint has a unique identifier or the streamer will not start
                    endpoint: "cruisecontrol_endpoint",
                    // All endpoint identifiers listed here must also be defined in this config
                    forwarding: [
                    ]
                },
            ]
        },
        mqtt: {
            // Same as for the zenoh section but for all MQTT5 based endpoints
            config_file: "config/MQTT_CONFIG.json5",
            endpoints: [
                {
                    authority: "AAOS",
                    endpoint: "aaos_endpoint",
                    forwarding: [
                        "cruisecontrol_endpoint",
                        "egovehicle_endpoint",
                    ]
                },
                {
                    authority: "Threadx",
                    endpoint: "threadx_endpoint",
                    forwarding: [
                        "cruisecontrol_endpoint",
                        "egovehicle_endpoint",
                    ]
                },
            ]
        },
    }
}
